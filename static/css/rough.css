
/* Main content */
main {
    padding: 20px;
}

/* General Recommendations Container */
.recommendations-container {
    display: flex;
    gap: 10px;
    padding: 10px;
    overflow-x: scroll; /* Enables horizontal scrolling */
    justify-content: flex-start; /* Align cards to the left */
    scroll-snap-type: x mandatory; /* Smooth snapping effect */
    width: 100%;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on mobile */
    scrollbar-width: none; /* Hide scrollbar for Firefox */
}


.recommendations-container::-webkit-scrollbar {
    display: none; /* Hide scrollbar for Webkit browsers */
}
/* Recommendation Card */
.recommendation-card {
    background: linear-gradient(145deg, rgba(17, 27, 27, 0.85), rgba(30, 50, 80, 0.295)); /* Gradient overlay */
   
    border-radius: 15px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
    padding: 15px;
    width: 400px; /* Reduced width for better proportion */
    display: flex;
    flex-direction: column;
    color: #ffffff;
    scroll-snap-align: start; /* Align each card to the viewport */
    overflow: hidden;
    font-family: 'Avenir', sans-serif;
    flex-shrink: 0;
    transition: transform 0.3s ease, box-shadow 0.3s ease; 

}

.recommendation-card:hover {
    transform: scale(1.02); /* Subtle zoom on hover */
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.6); /* Highlight on hover */
}

/* Card Header */
.card-header h2 {
    font-size: 20px;
    color: white;
    text-align: center;
    margin-bottom: 5px;
    font-family: 'Playfair Display', serif;
    
}


.card-header p {
    font-size: 16px;
    text-align: center;
    margin-bottom: 10px;
    font-family: 'Playfair Display', serif;
}


/* Menu Categories */
.menu-category {
    display:block;
    margin-bottom: 15px;
    font-family:  cursive;
    letter-spacing: 1px;
    border: #3b4e4e solid 2px;   
 border-radius: 12px;
 width: 100%;
 letter-spacing: 1.2px;
  
   
}

/* Individual Course */
.menu-course {
    flex: 1; /* Ensures both sections are balanced */
    background-color: #4a6363;
    padding: 5px;
    border-radius: 10px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    
}
.menu-course:hover {
    transform: scale(1.03);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
}

/* Course Title */
.menu-course h4 {
    font-size: 18px;
    font-family: 'Dancing Script', cursive;
    color: #ffd700;
    margin-bottom: 8px;
    text-align: center;
    margin-left: 20px;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    text-transform: uppercase;
}

/* Menu Items */
.menu-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.menu-item {
    padding: 8px;
    border-radius: 8px;
    font-size: 14px;
    color: #ffffffb0;
    transition: background-color 0.3s ease, transform 0.2s ease;
    

}

.menu-item:hover {
     transform: translateY(-3px);
}

.menu-item .item-name {
    font-size: 15px;
    font-weight: bold;
    color: linear-gradient(to right, #121616, #708d8b);
  
    margin-bottom: 5px;
    letter-spacing: 0.8px;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    box-shadow: 0 9px 4px rgba(0, 0, 0, 0.2);
  
}

.menu-item .item-details {
    font-size: 13px;
    color: #ffffff;
    margin-top: 4px;
    display: inline-flex;
    gap: 15px;
    flex-wrap: wrap;
}

.menu-item .item-details span {
    display: block;
    padding: 5px 10px;
    border-radius: 5px;
    font-family: 'Lora', serif;

    font-size: 12px;
    color: #ffffff;
    box-shadow: 0 9px 4px rgba(0, 0, 0, 0.2);
    letter-spacing: 4px;

}


.menu-item .item-details span:hover {
    background: linear-gradient(to right, #3b4e4e, #76c7c0);
    transform: scale(1.1);
}
*/

/* Footer Buttons */
.card-footer {
    margin-top: 10px;
    display: flex;
    justify-content: space-between;
}

.checkout-btn, .customize-btn {
    padding: 10px 15px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    color: #ffffff;
    background-color: #5ba89d;
}

.checkout-btn:hover {
    background-color: #4e8b8b;
}

.customize-btn {
    background-color: #88d8b0;
}

.customize-btn:hover {
    background-color: #6ebf9b;
}

/* Scrollbar Styling */
.recommendations-container::-webkit-scrollbar {
    height: 10px;
}

.recommendations-container::-webkit-scrollbar-thumb {
    background-color: #5ba89d;
    border-radius: 10px;
}

.recommendations-container::-webkit-scrollbar-track {
    background-color: #3b4e4e;
}

















/* */



/*We have a budget of $2000 for 50 guests with 5 vegans and 3 gluten-free.*/

/* Main content */
main {
    padding: 20px;
}

/* General Recommendations Container */
.recommendations-container {
    display: flex;
    gap: 10px;
    padding: 10px;
    overflow-x: scroll; /* Enables horizontal scrolling */
    justify-content: flex-start; /* Align cards to the left */
    scroll-snap-type: x mandatory; /* Smooth snapping effect */
    width: 100%;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on mobile */
    scrollbar-width: none; /* Hide scrollbar for Firefox */
}


.recommendations-container::-webkit-scrollbar {
    display: none; /* Hide scrollbar for Webkit browsers */
}
/* Recommendation Card */
.recommendation-card {
    background: linear-gradient(145deg, rgba(17, 27, 27, 0.85), rgba(30, 50, 80, 0.295)); /* Gradient overlay */
   
    border-radius: 15px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
    padding: 15px;
    width: 400px; /* Reduced width for better proportion */
    display: flex;
    flex-direction: column;
    color: #ffffff;
    scroll-snap-align: start; /* Align each card to the viewport */
    overflow: hidden;
    font-family: 'Avenir', sans-serif;
    flex-shrink: 0;
    transition: transform 0.3s ease, box-shadow 0.3s ease; 

}

.recommendation-card:hover {
    transform: scale(1.02); /* Subtle zoom on hover */
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.6); /* Highlight on hover */
}

/* Card Header */
.card-header h2 {
    font-size: 20px;
    color: white;
    text-align: center;
    margin-bottom: 5px;
    font-family: 'Playfair Display', serif;
    
}


.card-header p {
    font-size: 16px;
    text-align: center;
    margin-bottom: 10px;
    font-family: 'Playfair Display', serif;
}


/* Menu Categories */
.menu-category {
    display:block;
    margin-bottom: 15px;
    font-family:  cursive;
    letter-spacing: 1px;
    border: #3b4e4e solid 2px;   
 border-radius: 12px;
 width: 100%;
 letter-spacing: 1.2px;
  
   
}

/* Individual Course */
.menu-course {
    flex: 1; /* Ensures both sections are balanced */
    background-color: #4a6363;
    padding: 5px;
    border-radius: 10px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    
}
.menu-course:hover {
    transform: scale(1.03);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
}

/* Course Title */
.menu-course h4 {
    font-size: 18px;
    font-family: 'Dancing Script', cursive;
    color: #ffd700;
    margin-bottom: 8px;
    text-align: center;
    margin-left: 20px;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    text-transform: uppercase;
}

/* Menu Items */
.menu-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.menu-item {
    padding: 8px;
    border-radius: 8px;
    font-size: 14px;
    color: #ffffffb0;
    transition: background-color 0.3s ease, transform 0.2s ease;
    

}

.menu-item:hover {
     transform: translateY(-3px);
}

.menu-item .item-name {
    font-size: 15px;
    font-weight: bold;
    color: linear-gradient(to right, #121616, #708d8b);
  
    margin-bottom: 5px;
    letter-spacing: 0.8px;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    box-shadow: 0 9px 4px rgba(0, 0, 0, 0.2);
  
}

.menu-item .item-details {
    font-size: 13px;
    color: #ffffff;
    margin-top: 4px;
    display: inline-flex;
    gap: 15px;
    flex-wrap: wrap;
}

.menu-item .item-details span {
    display: block;
    padding: 5px 10px;
    border-radius: 5px;
    font-family: 'Lora', serif;

    font-size: 12px;
    color: #ffffff;
    box-shadow: 0 9px 4px rgba(0, 0, 0, 0.2);
    letter-spacing: 4px;

}


.menu-item .item-details span:hover {
    background: linear-gradient(to right, #3b4e4e, #76c7c0);
    transform: scale(1.1);
}

/* Footer Buttons */
.card-footer {
    margin-top: 10px;
    display: flex;
    justify-content: space-between;
}

.checkout-btn, .customize-btn {
    padding: 10px 15px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    color: #ffffff;
    background-color: #5ba89d;
}

.checkout-btn:hover {
    background-color: #4e8b8b;
}

.customize-btn {
    background-color: #88d8b0;
}

.customize-btn:hover {
    background-color: #6ebf9b;
}

/* Scrollbar Styling */
.recommendations-container::-webkit-scrollbar {
    height: 10px;
}

.recommendations-container::-webkit-scrollbar-thumb {
    background-color: #5ba89d;
    border-radius: 10px;
}

.recommendations-container::-webkit-scrollbar-track {
    background-color: #3b4e4e;
}



/*
*/


<h2>Current Menu:</h2>
{% for course, items in selected_rec['Final Menu'].items() %}
    <h3>{{ course }}</h3>
    {% if items %}
        <table border="1">
            <tr>
                <th>Item</th>
                <th>Dietary Restrictions</th>
                <th>Portion Size</th>
                <th>Quantity</th>
                <th>Cost per Item</th>
                <th>Total Cost</th>
            </tr>
            {% for item in items %}
                <tr>
                    <td>{{ item['Item'] }}</td>
                    <td>{{item['Dietary Restrictions']}}</td>
                    <td>{{ item['Selected Portion']['Qty'] }}</td>
                    <td>{{ item['Quantity'] }}</td>
                    <td>${{ item['Selected Portion']['Cost'] }}</td>
                    <td>${{ item['Total_Cost'] }}</td>
                </tr>
            {% endfor %}
        </table>
    {% else %}
        <p>No items selected for this course.</p>
    {% endif %}
{% endfor %}
</body>
</html>

async function startGameAndSubmit(event) {
    event.preventDefault(); // Prevent form submission

    // Collect the form data
    const textarea = document.getElementById("requirements");
    const inputText = textarea.value.trim().toLowerCase();
    const errorMessage = document.getElementById("validation-error");

    // Validate the input
    const budgetRegex = /\$\d+/;
    const guestCountRegex = /\d+\s*guests?/;

    if (!budgetRegex.test(inputText) || !guestCountRegex.test(inputText)) {
        errorMessage.style.display = "block";
        textarea.style.borderColor = "red";
        return; // Stop if validation fails
    }

    errorMessage.style.display = "none";
    textarea.style.borderColor = ""; // Reset styles

    // Show the game overlay
    const gameOverlay = document.getElementById("game-overlay");
    gameOverlay.style.display = "flex";

    let recommendationsReady = false;
    let recommendationsUrl = "";

    try {
        // Send form data to the backend
        const formData = new FormData(event.target);
        const response = await fetch("/", {
            method: "POST",
            body: formData,
        });

        // Handle redirection
        if (response.redirected) {
            recommendationsReady = true;
            recommendationsUrl = response.url;

            console.log("Recommendations are ready:", recommendationsUrl);

            // Show modal when recommendations are ready
            if (recommendationsReady) {
                showRecommendationModal(recommendationsUrl);
            }
        } else {
            const errorText = await response.text();
            console.error("Failed to fetch recommendations:", response.status, errorText);
        }
    } catch (error) {
        console.error("Error submitting form:", error);
    }
}

function showRecommendationModal(recommendationsUrl) {
    const modalHTML = `
        <div id="recommendation-modal" style="position: fixed; z-index: 2000; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0, 0, 0, 0.8); padding: 20px; color: white; border-radius: 8px; text-align: center;">
            <h2>Recommendations Ready</h2>
            <p>Your recommendations are ready. Do you want to proceed?</p>
            <div style="margin-top: 10px; display: flex; justify-content: center; gap: 10px;">
                <button id="proceed-btn" style="background: green; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer;">Proceed</button>
                <button id="stay-btn" style="background: blue; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer;">Stay Here</button>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML("beforeend", modalHTML);

    document.getElementById("proceed-btn").addEventListener("click", () => {
        window.location.href = recommendationsUrl; // Redirect to recommendations
    });

    document.getElementById("stay-btn").addEventListener("click", () => {
        document.getElementById("recommendation-modal").remove(); // Close modal
    });
}











async function startGameAndSubmit(event) {
    event.preventDefault(); // Prevent form submission

    // Collect the form data
    const textarea = document.getElementById("requirements");
    const inputText = textarea.value.trim().toLowerCase();
    const errorMessage = document.getElementById("validation-error");

    // Validate the input
    const budgetRegex = /\$\d+/;
    const guestCountRegex = /\d+\s*guests?/;

    if (!budgetRegex.test(inputText) || !guestCountRegex.test(inputText)) {
        errorMessage.style.display = "block";
        textarea.style.borderColor = "red";
        return; // Stop if validation fails
    }

    errorMessage.style.display = "none";
    textarea.style.borderColor = ""; // Reset styles

    // Show the game overlay
    const gameOverlay = document.getElementById("game-overlay");
    gameOverlay.style.display = "flex";

    let recommendationsReady = false;
    let recommendationsUrl = "";

    try {
        // Send form data to the backend
        const formData = new FormData(event.target);
        const response = await fetch("/", {
            method: "POST",
            body: formData,
        });

        // Handle redirection
        if (response.redirected) {
            recommendationsReady = true;
            recommendationsUrl = response.url;

            console.log("Recommendations are ready:", recommendationsUrl);

            // Show modal when recommendations are ready
            if (recommendationsReady) {
                showRecommendationModal(recommendationsUrl);
            }
        } else {
            const errorText = await response.text();
            console.error("Failed to fetch recommendations:", response.status, errorText);
        }
    } catch (error) {
        console.error("Error submitting form:", error);
    }
}

function showRecommendationModal(recommendationsUrl) {
    const modalHTML = `
        <div id="recommendation-modal" style="position: fixed; z-index: 2000; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0, 0, 0, 0.8); padding: 20px; color: white; border-radius: 8px; text-align: center;">
            <h3>Recommendations Ready</h3>
            <p> Do you want to proceed?</p>
            <div style="margin-top: 10px; display: flex; justify-content: center; gap: 10px;">
                <button id="proceed-btn" style="background: green; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer;">Proceed</button>
                <button id="stay-btn" style="background: blue; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer;">Stay Here</button>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML("beforeend", modalHTML);

    document.getElementById("proceed-btn").addEventListener("click", () => {
        window.location.href = recommendationsUrl; // Redirect to recommendations
    });

    document.getElementById("stay-btn").addEventListener("click", () => {
        document.getElementById("recommendation-modal").remove(); // Close modal
    });
}


function initSnakeGame(showModalCallback) {
    const playBoard = document.querySelector(".play-board");
    const scoreElement = document.querySelector(".score");
    const highScoreElement = document.querySelector(".high-score");

    let blockSize = 25;
    let total_row = 17;
    let total_col = 17;
    let snakeX = blockSize * 5;
    let snakeY = blockSize * 5;
    let velocityX = 0;
    let velocityY = 0;
    let snakeBody = [[snakeX, snakeY]];
    let foodX, foodY;
    let gameOver = false;
    let score = 0;

    let highScore = localStorage.getItem("high-score") || 0;
    highScoreElement.innerText = `High Score: ${highScore}`;

    const placeFood = () => {
        do {
            foodX = Math.floor(Math.random() * total_col) * blockSize;
            foodY = Math.floor(Math.random() * total_row) * blockSize;
        } while (snakeBody.some(segment => segment[0] === foodX && segment[1] === foodY));
    };
    placeFood();

    const renderGame = () => {
        playBoard.innerHTML = ""; // Clear the board

        // Render food
        const foodElement = document.createElement("div");
        foodElement.style.gridArea = `${foodY / blockSize + 1} / ${foodX / blockSize + 1}`;
        foodElement.classList.add("food");
        playBoard.appendChild(foodElement);

        // Render snake
        snakeBody.forEach(segment => {
            const segmentElement = document.createElement("div");
            segmentElement.style.gridArea = `${segment[1] / blockSize + 1} / ${segment[0] / blockSize + 1}`;
            segmentElement.classList.add("head");
            playBoard.appendChild(segmentElement);
        });

        scoreElement.innerText = `Score: ${score}`;
    };

    const handleGameOver = () => {
        clearInterval(setIntervalId);
        gameOver = true;

        const gameOverMessage = `
            <div id="game-over-card" style="display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; background: rgba(0, 0, 0, 0.7); color: white; border-radius: 8px; padding: 20px; width: 300px; margin: auto; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <h2>Game Over</h2>
                <p>Oops! You hit the wall or yourself.</p>
                <button id="restart-btn" style="background: #007BFF; color: white; padding: 10px; border-radius: 4px; cursor: pointer;">Restart</button>
            </div>
        `;
        playBoard.innerHTML = gameOverMessage;

        document.getElementById("restart-btn").addEventListener("click", restartGame);

        // Show recommendation modal if ready
        if (recommendationsReady) {
            showModalCallback(recommendationsUrl);
        }
    };

    const restartGame = () => {
        gameOver = false;
        snakeX = blockSize * 5;
        snakeY = blockSize * 5;
        velocityX = 0;
        velocityY = 0;
        snakeBody = [[snakeX, snakeY]];
        score = 0;
        placeFood();
        setIntervalId = setInterval(updateGame, 200);
        renderGame();
    };

    const updateGame = () => {
        if (gameOver) return handleGameOver();

        snakeX += velocityX * blockSize;
        snakeY += velocityY * blockSize;

        if (snakeX < 0 || snakeX >= blockSize * total_col || snakeY < 0 || snakeY >= blockSize * total_row) {
            gameOver = true;
            return handleGameOver();
        }

        for (let i = 1; i < snakeBody.length; i++) {
            if (snakeBody[i][0] === snakeX && snakeBody[i][1] === snakeY) {
                gameOver = true;
                return handleGameOver();
            }
        }

        if (snakeX === foodX && snakeY === foodY) {
            score++;
            snakeBody.push([foodX, foodY]);
            highScore = Math.max(score, highScore);
            localStorage.setItem("high-score", highScore);
            highScoreElement.innerText = `High Score: ${highScore}`;
            placeFood();
        }

        for (let i = snakeBody.length - 1; i > 0; i--) {
            snakeBody[i] = [...snakeBody[i - 1]];
        }
        snakeBody[0] = [snakeX, snakeY];

        renderGame();
    };

    const changeDirection = (e) => {
        if (e.key === "ArrowUp" && velocityY !== 1) {
            velocityX = 0;
            velocityY = -1;
        } else if (e.key === "ArrowDown" && velocityY !== -1) {
            velocityX = 0;
            velocityY = 1;
        } else if (e.key === "ArrowLeft" && velocityX !== 1) {
            velocityX = -1;
            velocityY = 0;
        } else if (e.key === "ArrowRight" && velocityX !== -1) {
            velocityX = 1;
            velocityY = 0;
        }
    };

    document.addEventListener("keyup", changeDirection);

    let setIntervalId = setInterval(updateGame, 200);

    renderGame();
}
<!DOCTYPE html>
<html>
<head>
    <title>Customize Your Menu</title>
    <link rel="stylesheet" type="text/css" href="../static/css/chat.css">
</head>
<body>
    <h1>Customize Your Menu</h1>
    <div>
            {% for message in chat_history %}
                {% if message.role == 'user' %}
                    <p><strong>You:</strong> {{ message.content }}</p>
                {% else %}
                    <p><strong>Assistant:</strong> {{ message.content }}</p>
                {% endif %}
            {% endfor %}
    </div>
    <form method="post">
        <input type="text" name="user_input" placeholder="Type your message here..." size="80" required>
        <input type="submit" value="Send">
    </form>




















    <!DOCTYPE html>
<html>
<head>
    <title>Customize Your Menu</title>
    <link rel="stylesheet" type="text/css" href="../static/css/chat.css">
    <script src="../static/js/bot.js"></script>
    
</head>
<body>
    <!-- Help Section -->
    <div class="help-section" id="help-section">
        <h1>How can we help you?</h1>
        <form class="help-input-container" onsubmit="submitAsk(event); return false;">
            <input type="text" id="help-input" class="help-input" placeholder="Share your group size, dietary needs, or preferences..." required>
            <input type="submit" value="Ask" class="help-submit">
        </form>
        <div class="help-buttons">
            <button type="button" onclick="startChat('Show me dessert!')">Show me dessert!</button>
            <button type="button" onclick="startChat('Vegan options..')">Vegan options..</button>
            <button type="button" onclick="startChat('Sharing platters')">Sharing platters</button>
        </div>
    </div>

    <!-- Chat Section -->
    <div class="chat-container" id="chat-container">
        <h1>Customize Your Menu</h1>
        <div class="chat-history" id="chat-history">
            {% for message in chat_history %}
                {% if message.role == 'user' %}
                <div class="chat-bubble user">
                    <img class="avatar" src="../static/assests/human.jpg" alt="User">
                    <p class="bubble-content"><strong>You:</strong> {{ message.content }}</p>
                </div>
          
                {% else %}
                <div class="chat-bubble assistant">
                    <img class="avatar" src="../static/assests/bot.png" alt="Assistant">
                    <p class="bubble-content"><strong>Assistant:</strong> {{ message.content }}</p>
                </div>
        
                {% endif %}
            {% endfor %}
        </div>
        <form class="chat-input-container" onsubmit="sendMessage(event); return false;">
            <input type="text" id="chat-input" class="chat-input" placeholder="Type your message here..." required>
            <input type="submit" value="Send" class="chat-submit">
        </form>
    </div>

    <!-- Checkout Modal -->
<div id="emailModal" class="modal" style="display: none;">
    <div class="checkout-container">
        <span class="close" onclick="closeEmailModal()">&times;</span>
        <div class="checkout-form">
            <h2>Enter Your Details</h2>
            <form id="emailForm" onsubmit="event.preventDefault(); redirectToPaymentGateway(this);">
                <label for="user_name">Full Name</label>
                <input type="text" id="user_name" name="user_name" placeholder="John Doe" required>
                <label for="user_email">Email</label>
                <input type="email" id="user_email" name="user_email" placeholder="example@domain.com" required>
                <label for="user_address">Delivery Address</label>
                <input type="text" id="user_address" name="user_address" placeholder="1234 Main St" required>
                <label for="date">Delivery Date</label>
                <input type="date" id="date" name="date" required>
                <label for="contact_number">Contact Number</label>
                <input type="tel" id="contact_number" name="contact_number" placeholder="123-456-7890" required>
                <button type="submit">Confirm Checkout</button>
            </form>
        </div>
    </div>
</div>

   
</body>
</html>






////

<!-- Chat Container -->
<div class="chat-container">
    <h1 class="gradient-header">How can I help you </h1>
    <div class="chat-history" id="chat-history">
        
        <!-- Render server-side chat history -->
        {% for message in chat_history %}
            <div class="chat-bubble {{ 'user' if message.role == 'user' else 'assistant' }}">
                <img class="avatar" src="{{ '../static/assests/human.jpg' if message.role == 'user' else '../static/assests/bot.png' }}" alt="{{ message.role }}">
                <p><strong>{{ 'You' if message.role == 'user' else 'Assistant' }}:</strong> {{ message.content }}</p>
            </div>
        {% endfor %}
    </div>
    <!-- Chat input form -->
    <form class="chat-input-container" onsubmit="return false;">
        <input type="text" id="chat-input" class="chat-input" placeholder="Type your message here..." required>
        <button type="submit" class="chat-submit">Send</button>
    </form>
</div>




document.addEventListener("DOMContentLoaded", function () {
    const MAX_MESSAGES = 3; // Maximum number of messages to display

    // Send Message Handler
    async function sendMessage(event) {
        event.preventDefault(); // Prevent form submission to stop default behavior
        const userInput = document.getElementById('chat-input').value.trim();
        if (userInput) {
            appendMessage('user', userInput); // Add user's message to chat
            document.getElementById('chat-input').value = ''; // Clear the input field
            try {
                await fetchChatResponse(userInput); // Fetch response from the server
                // Reload the page after processing the chat response
                window.location.reload(); // This will reload the page to show the updated state
            } catch (error) {
                console.error('Error fetching chat response:', error);
                appendMessage('assistant', 'The assistant is currently unavailable. Please try again later.');
                // Reload the page in case of errors
                window.location.reload();
            }
        }
    }

    // Append Message to Chat History
    function appendMessage(role, message) {
        const chatHistory = document.getElementById('chat-history');
        const bubble = document.createElement('div');
        bubble.classList.add('chat-bubble', role);

        const avatar = document.createElement('img');
        avatar.classList.add('avatar');
        avatar.src = role === 'user' ? '../static/assests/human.jpg' : '../static/assests/bot.png';
        avatar.alt = role === 'user' ? 'User' : 'Assistant';

        const text = document.createElement('p');
        text.innerHTML = `<strong>${role === 'user' ? 'You' : 'Assistant'}:</strong> ${message}`;

        bubble.appendChild(avatar);
        bubble.appendChild(text);
        chatHistory.appendChild(bubble);

        limitMessages(); // Limit the number of messages displayed
        chatHistory.scrollTop = chatHistory.scrollHeight; // Auto-scroll to the latest message
    }

    // Limit the Number of Messages in Chat History
    function limitMessages() {
        const chatHistory = document.getElementById('chat-history');
        const bubbles = chatHistory.getElementsByClassName('chat-bubble');
        if (bubbles.length > MAX_MESSAGES * 2) { // Each user input generates two bubbles (user + assistant)
            chatHistory.removeChild(bubbles[0]); // Remove the oldest bubble
        }
    }

    // Fetch Response from the Backend
    async function fetchChatResponse(message) {
        appendMessage('assistant', '<em>Typing...</em>'); // Add typing indicator

        try {
            const response = await fetch('/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `user_input=${encodeURIComponent(message)}`, // URL-encoded data
            });

            // Remove the "Typing..." placeholder
            const chatHistory = document.getElementById('chat-history');
            chatHistory.lastChild.remove();

            if (response.ok) {
                const data = await response.json();
                if (data && data.response) {
                    appendMessage('assistant', data.response); // Show assistant's response
                } else {
                    appendMessage('assistant', "I'm sorry, I couldn't understand your request. Please try again.");
                }
            } else {
                console.error('Error in response:', response.status, response.statusText);
                appendMessage('assistant', "An error occurred while processing your request. Please try again.");
            }
        } catch (error) {
            console.error('Fetch error:', error);

            const chatHistory = document.getElementById('chat-history');
            if (chatHistory.lastChild.innerHTML.includes('<em>Typing...</em>')) {
                chatHistory.lastChild.remove();
            }

            appendMessage('assistant', 'The assistant is currently unavailable. Please try again later.');
        }
    }

    // Attach Event Listener to Form
    const form = document.querySelector('.chat-input-container');
    form.addEventListener('submit', sendMessage);
});
